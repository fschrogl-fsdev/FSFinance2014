<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xmlns="http://xmlns.jcp.org/xml/ns/javaee"
		 xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
		 id="FSFinance" version="3.1">

  <!-- General description -->
  <display-name>FSFinance</display-name>
  <description>
	A little Web-Application to keep track of daily expenses.
  </description>


  <session-config>
	<!-- Session timeout in minutes -->
	<session-timeout>1</session-timeout>
  </session-config>


  <!-- Context Parameters -->
  <context-param>
	<description>Don't render XML comments</description>
	<param-name>javax.faces.FACELETS_SKIP_COMMENTS</param-name>
	<param-value>true</param-value>
  </context-param>
  <context-param>
	<description>
	  Use NULL values for empty input fields (mandatory for JSR-303 Bean Validation).
	  INFO: When using an application server that uses Apache EL parser (e.g. Tomcat, JBoss,
	  WebSphere, etc.) this doesn't work (for primitive types), unless the server is
	  started with the following VM argument set -Dorg.apache.el.parser.COERCE_TO_ZERO=false
	  see: http://balusc.blogspot.co.at/2011/09/communication-in-jsf-20.html
	  see: http://stackoverflow.com/questions/5225013/coerce-to-zero-at-runtime
	</description>
	<param-name>javax.faces.INTERPRET_EMPTY_STRING_SUBMITTED_VALUES_AS_NULL</param-name>
	<param-value>true</param-value>
  </context-param>
  <context-param>
	<description>
	  Project state: Development|UnitTest|SytemTest|Production
	  INFO: The PROJECT_STAGE value can also be configured through JNDI. If
	  java:comp/env/jsf/ProjectStage is defined (and found) its value is used
	  instead of the one defined in the web.xml.
	  see: http://stackoverflow.com/questions/6524901/how-to-configure-jsf-2-0-applications-project-stage-via-jndi-in-tomcat
	</description>
	<param-name>javax.faces.PROJECT_STAGE</param-name>
	<param-value>Production</param-value>
  </context-param>
  <context-param>
	<description>
	  Resources that must not be (directly) accessable. Default: .class .jsp .jspx .properties .xhtml
	</description>
	<param-name>javax.faces.RESOURCE_EXCLUDES</param-name>
	<param-value>.class .jsp .jspx .properties .xhtml</param-value>
  </context-param>
  <context-param>
	<description>State saving method: server|client</description>
	<param-name>javax.faces.STATE_SAVING_METHOD</param-name>
	<param-value>server</param-value>
  </context-param>


  <!-- JNDI References -->
  <resource-ref>
	<description>DatSource Reference (Database)</description>
	<res-ref-name>jdbc/FSFinanceDB</res-ref-name>
	<res-type>javax.sql.DataSource</res-type>
	<res-auth>Container</res-auth>
  </resource-ref>


  <!-- Register WebContext-Listener for Spring -->
  <context-param>
	<!-- Defaults to /WEB-INF/applicationContext.xml -->
	<param-name>contextConfigLocation</param-name>
	<param-value>/WEB-INF/spring/applicationContext.xml</param-value>
  </context-param>
  <listener>
	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>


  <!-- Register Filter for Spring Security -->
  <!-- The order in which filters are defined is important/matters. Spring Security filters
       should be defined first! -->
  <filter>
	<filter-name>springSecurityFilterChain</filter-name>
	<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
  </filter>
  <filter-mapping>
	<!-- The Filter Chain must accept FORWARD requests (for login) and REQUEST requests (for logout) -->
	<filter-name>springSecurityFilterChain</filter-name>
	<url-pattern>/*</url-pattern>
	<dispatcher>FORWARD</dispatcher>
	<dispatcher>REQUEST</dispatcher>
  </filter-mapping>


  <!-- Servlet Definitions (optional since v3.0) -->
  <servlet>
	<servlet-name>Faces Servlet</servlet-name>
	<servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
	<load-on-startup>1</load-on-startup>
  </servlet>


  <!-- Servlet Mappings -->
  <servlet-mapping>
	<servlet-name>Faces Servlet</servlet-name>
	<url-pattern>*.xhtml</url-pattern>
  </servlet-mapping>


  <!-- Application's entry point -->
  <welcome-file-list>
	<welcome-file>pages/restricted/home.xhtml</welcome-file>
  </welcome-file-list>


  <!-- Application's error pages -->
  <error-page>
    <exception-type>javax.faces.application.ViewExpiredException</exception-type>
    <location>/pages/error.xhtml?error=viewExpired</location>
  </error-page>
  <error-page>
    <error-code>404</error-code>
    <location>/pages/error.xhtml?error=404</location>
  </error-page>
  <error-page>
    <error-code>403</error-code>
    <location>/pages/error.xhtml?error=403</location>
  </error-page>

</web-app>